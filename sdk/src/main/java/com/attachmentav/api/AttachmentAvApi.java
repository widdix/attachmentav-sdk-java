/*
 * attachmentAV
 * Scan files for viruses, trojans, and other kinds of malware.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.attachmentav.api;

import com.attachmentav.client.ApiCallback;
import com.attachmentav.client.ApiClient;
import com.attachmentav.client.ApiException;
import com.attachmentav.client.ApiResponse;
import com.attachmentav.client.Configuration;
import com.attachmentav.client.Pair;
import com.attachmentav.client.ProgressRequestBody;
import com.attachmentav.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.attachmentav.model.ScanResult;
import com.attachmentav.model.SyncDownloadScanRequest;
import com.attachmentav.model.SyncS3ScanRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AttachmentAvApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AttachmentAvApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AttachmentAvApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for scanSyncBinaryPost
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scanSyncBinaryPostCall(@javax.annotation.Nonnull File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scan/sync/binary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scanSyncBinaryPostValidateBeforeCall(@javax.annotation.Nonnull File body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling scanSyncBinaryPost(Async)");
        }

        return scanSyncBinaryPostCall(body, _callback);

    }

    /**
     * 
     * Upload a file, scan the file, and return the scan result.
     * @param body  (required)
     * @return ScanResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ScanResult scanSyncBinaryPost(@javax.annotation.Nonnull File body) throws ApiException {
        ApiResponse<ScanResult> localVarResp = scanSyncBinaryPostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Upload a file, scan the file, and return the scan result.
     * @param body  (required)
     * @return ApiResponse&lt;ScanResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScanResult> scanSyncBinaryPostWithHttpInfo(@javax.annotation.Nonnull File body) throws ApiException {
        okhttp3.Call localVarCall = scanSyncBinaryPostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<ScanResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Upload a file, scan the file, and return the scan result.
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scanSyncBinaryPostAsync(@javax.annotation.Nonnull File body, final ApiCallback<ScanResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = scanSyncBinaryPostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<ScanResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scanSyncDownloadPost
     * @param syncDownloadScanRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scanSyncDownloadPostCall(@javax.annotation.Nonnull SyncDownloadScanRequest syncDownloadScanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = syncDownloadScanRequest;

        // create path and map variables
        String localVarPath = "/scan/sync/download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scanSyncDownloadPostValidateBeforeCall(@javax.annotation.Nonnull SyncDownloadScanRequest syncDownloadScanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'syncDownloadScanRequest' is set
        if (syncDownloadScanRequest == null) {
            throw new ApiException("Missing the required parameter 'syncDownloadScanRequest' when calling scanSyncDownloadPost(Async)");
        }

        return scanSyncDownloadPostCall(syncDownloadScanRequest, _callback);

    }

    /**
     * 
     * Download a file from a remote location (HTTP/HTTPS), scan the file, and return the scan result.
     * @param syncDownloadScanRequest  (required)
     * @return ScanResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ScanResult scanSyncDownloadPost(@javax.annotation.Nonnull SyncDownloadScanRequest syncDownloadScanRequest) throws ApiException {
        ApiResponse<ScanResult> localVarResp = scanSyncDownloadPostWithHttpInfo(syncDownloadScanRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Download a file from a remote location (HTTP/HTTPS), scan the file, and return the scan result.
     * @param syncDownloadScanRequest  (required)
     * @return ApiResponse&lt;ScanResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScanResult> scanSyncDownloadPostWithHttpInfo(@javax.annotation.Nonnull SyncDownloadScanRequest syncDownloadScanRequest) throws ApiException {
        okhttp3.Call localVarCall = scanSyncDownloadPostValidateBeforeCall(syncDownloadScanRequest, null);
        Type localVarReturnType = new TypeToken<ScanResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Download a file from a remote location (HTTP/HTTPS), scan the file, and return the scan result.
     * @param syncDownloadScanRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scanSyncDownloadPostAsync(@javax.annotation.Nonnull SyncDownloadScanRequest syncDownloadScanRequest, final ApiCallback<ScanResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = scanSyncDownloadPostValidateBeforeCall(syncDownloadScanRequest, _callback);
        Type localVarReturnType = new TypeToken<ScanResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scanSyncFormPost
     * @param _file  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scanSyncFormPostCall(@javax.annotation.Nonnull File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scan/sync/form";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scanSyncFormPostValidateBeforeCall(@javax.annotation.Nonnull File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling scanSyncFormPost(Async)");
        }

        return scanSyncFormPostCall(_file, _callback);

    }

    /**
     * 
     * Upload a file, scan the file, and return the scan result.
     * @param _file  (required)
     * @return ScanResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ScanResult scanSyncFormPost(@javax.annotation.Nonnull File _file) throws ApiException {
        ApiResponse<ScanResult> localVarResp = scanSyncFormPostWithHttpInfo(_file);
        return localVarResp.getData();
    }

    /**
     * 
     * Upload a file, scan the file, and return the scan result.
     * @param _file  (required)
     * @return ApiResponse&lt;ScanResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScanResult> scanSyncFormPostWithHttpInfo(@javax.annotation.Nonnull File _file) throws ApiException {
        okhttp3.Call localVarCall = scanSyncFormPostValidateBeforeCall(_file, null);
        Type localVarReturnType = new TypeToken<ScanResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Upload a file, scan the file, and return the scan result.
     * @param _file  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scanSyncFormPostAsync(@javax.annotation.Nonnull File _file, final ApiCallback<ScanResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = scanSyncFormPostValidateBeforeCall(_file, _callback);
        Type localVarReturnType = new TypeToken<ScanResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scanSyncS3Post
     * @param syncS3ScanRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scanSyncS3PostCall(@javax.annotation.Nonnull SyncS3ScanRequest syncS3ScanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = syncS3ScanRequest;

        // create path and map variables
        String localVarPath = "/scan/sync/s3";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scanSyncS3PostValidateBeforeCall(@javax.annotation.Nonnull SyncS3ScanRequest syncS3ScanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'syncS3ScanRequest' is set
        if (syncS3ScanRequest == null) {
            throw new ApiException("Missing the required parameter 'syncS3ScanRequest' when calling scanSyncS3Post(Async)");
        }

        return scanSyncS3PostCall(syncS3ScanRequest, _callback);

    }

    /**
     * 
     * Download a file from S3, scan the file, and return the scan result. A bucket policy is required to grant attachmentAV access to the S3 objects.
     * @param syncS3ScanRequest  (required)
     * @return ScanResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ScanResult scanSyncS3Post(@javax.annotation.Nonnull SyncS3ScanRequest syncS3ScanRequest) throws ApiException {
        ApiResponse<ScanResult> localVarResp = scanSyncS3PostWithHttpInfo(syncS3ScanRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Download a file from S3, scan the file, and return the scan result. A bucket policy is required to grant attachmentAV access to the S3 objects.
     * @param syncS3ScanRequest  (required)
     * @return ApiResponse&lt;ScanResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScanResult> scanSyncS3PostWithHttpInfo(@javax.annotation.Nonnull SyncS3ScanRequest syncS3ScanRequest) throws ApiException {
        okhttp3.Call localVarCall = scanSyncS3PostValidateBeforeCall(syncS3ScanRequest, null);
        Type localVarReturnType = new TypeToken<ScanResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Download a file from S3, scan the file, and return the scan result. A bucket policy is required to grant attachmentAV access to the S3 objects.
     * @param syncS3ScanRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scanSyncS3PostAsync(@javax.annotation.Nonnull SyncS3ScanRequest syncS3ScanRequest, final ApiCallback<ScanResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = scanSyncS3PostValidateBeforeCall(syncS3ScanRequest, _callback);
        Type localVarReturnType = new TypeToken<ScanResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
