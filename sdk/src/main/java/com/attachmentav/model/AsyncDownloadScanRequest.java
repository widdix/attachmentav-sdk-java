/*
 * attachmentAV
 * Scan files for viruses, trojans, and other kinds of malware.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.attachmentav.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.attachmentav.client.JSON;

/**
 * AsyncDownloadScanRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-29T20:00:09.114834+01:00[Europe/Berlin]", comments = "Generator version: 7.15.0")
public class AsyncDownloadScanRequest {
  public static final String SERIALIZED_NAME_DOWNLOAD_URL = "download_url";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_URL)
  @javax.annotation.Nonnull
  private String downloadUrl;

  public static final String SERIALIZED_NAME_DOWNLOAD_HEADERS = "download_headers";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_HEADERS)
  @javax.annotation.Nullable
  private Map<String, String> downloadHeaders = new HashMap<>();

  public static final String SERIALIZED_NAME_CALLBACK_URL = "callback_url";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URL)
  @javax.annotation.Nonnull
  private String callbackUrl;

  public static final String SERIALIZED_NAME_CALLBACK_HEADERS = "callback_headers";
  @SerializedName(SERIALIZED_NAME_CALLBACK_HEADERS)
  @javax.annotation.Nullable
  private Map<String, String> callbackHeaders = new HashMap<>();

  public static final String SERIALIZED_NAME_TRACE_ID = "trace_id";
  @SerializedName(SERIALIZED_NAME_TRACE_ID)
  @javax.annotation.Nullable
  private String traceId;

  public static final String SERIALIZED_NAME_CUSTOM_DATA = "custom_data";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATA)
  @javax.annotation.Nullable
  private String customData;

  public AsyncDownloadScanRequest() {
  }

  public AsyncDownloadScanRequest downloadUrl(@javax.annotation.Nonnull String downloadUrl) {
    this.downloadUrl = downloadUrl;
    return this;
  }

  /**
   * Get downloadUrl
   * @return downloadUrl
   */
  @javax.annotation.Nonnull
  public String getDownloadUrl() {
    return downloadUrl;
  }

  public void setDownloadUrl(@javax.annotation.Nonnull String downloadUrl) {
    this.downloadUrl = downloadUrl;
  }


  public AsyncDownloadScanRequest downloadHeaders(@javax.annotation.Nullable Map<String, String> downloadHeaders) {
    this.downloadHeaders = downloadHeaders;
    return this;
  }

  public AsyncDownloadScanRequest putDownloadHeadersItem(String key, String downloadHeadersItem) {
    if (this.downloadHeaders == null) {
      this.downloadHeaders = new HashMap<>();
    }
    this.downloadHeaders.put(key, downloadHeadersItem);
    return this;
  }

  /**
   * Get downloadHeaders
   * @return downloadHeaders
   */
  @javax.annotation.Nullable
  public Map<String, String> getDownloadHeaders() {
    return downloadHeaders;
  }

  public void setDownloadHeaders(@javax.annotation.Nullable Map<String, String> downloadHeaders) {
    this.downloadHeaders = downloadHeaders;
  }


  public AsyncDownloadScanRequest callbackUrl(@javax.annotation.Nonnull String callbackUrl) {
    this.callbackUrl = callbackUrl;
    return this;
  }

  /**
   * Get callbackUrl
   * @return callbackUrl
   */
  @javax.annotation.Nonnull
  public String getCallbackUrl() {
    return callbackUrl;
  }

  public void setCallbackUrl(@javax.annotation.Nonnull String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }


  public AsyncDownloadScanRequest callbackHeaders(@javax.annotation.Nullable Map<String, String> callbackHeaders) {
    this.callbackHeaders = callbackHeaders;
    return this;
  }

  public AsyncDownloadScanRequest putCallbackHeadersItem(String key, String callbackHeadersItem) {
    if (this.callbackHeaders == null) {
      this.callbackHeaders = new HashMap<>();
    }
    this.callbackHeaders.put(key, callbackHeadersItem);
    return this;
  }

  /**
   * Get callbackHeaders
   * @return callbackHeaders
   */
  @javax.annotation.Nullable
  public Map<String, String> getCallbackHeaders() {
    return callbackHeaders;
  }

  public void setCallbackHeaders(@javax.annotation.Nullable Map<String, String> callbackHeaders) {
    this.callbackHeaders = callbackHeaders;
  }


  public AsyncDownloadScanRequest traceId(@javax.annotation.Nullable String traceId) {
    this.traceId = traceId;
    return this;
  }

  /**
   * Get traceId
   * @return traceId
   */
  @javax.annotation.Nullable
  public String getTraceId() {
    return traceId;
  }

  public void setTraceId(@javax.annotation.Nullable String traceId) {
    this.traceId = traceId;
  }


  public AsyncDownloadScanRequest customData(@javax.annotation.Nullable String customData) {
    this.customData = customData;
    return this;
  }

  /**
   * Get customData
   * @return customData
   */
  @javax.annotation.Nullable
  public String getCustomData() {
    return customData;
  }

  public void setCustomData(@javax.annotation.Nullable String customData) {
    this.customData = customData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AsyncDownloadScanRequest asyncDownloadScanRequest = (AsyncDownloadScanRequest) o;
    return Objects.equals(this.downloadUrl, asyncDownloadScanRequest.downloadUrl) &&
        Objects.equals(this.downloadHeaders, asyncDownloadScanRequest.downloadHeaders) &&
        Objects.equals(this.callbackUrl, asyncDownloadScanRequest.callbackUrl) &&
        Objects.equals(this.callbackHeaders, asyncDownloadScanRequest.callbackHeaders) &&
        Objects.equals(this.traceId, asyncDownloadScanRequest.traceId) &&
        Objects.equals(this.customData, asyncDownloadScanRequest.customData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(downloadUrl, downloadHeaders, callbackUrl, callbackHeaders, traceId, customData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AsyncDownloadScanRequest {\n");
    sb.append("    downloadUrl: ").append(toIndentedString(downloadUrl)).append("\n");
    sb.append("    downloadHeaders: ").append(toIndentedString(downloadHeaders)).append("\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    callbackHeaders: ").append(toIndentedString(callbackHeaders)).append("\n");
    sb.append("    traceId: ").append(toIndentedString(traceId)).append("\n");
    sb.append("    customData: ").append(toIndentedString(customData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("download_url", "download_headers", "callback_url", "callback_headers", "trace_id", "custom_data"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("download_url", "callback_url"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AsyncDownloadScanRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AsyncDownloadScanRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AsyncDownloadScanRequest is not found in the empty JSON string", AsyncDownloadScanRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AsyncDownloadScanRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AsyncDownloadScanRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AsyncDownloadScanRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("download_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `download_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("download_url").toString()));
      }
      if (!jsonObj.get("callback_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callback_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callback_url").toString()));
      }
      if ((jsonObj.get("trace_id") != null && !jsonObj.get("trace_id").isJsonNull()) && !jsonObj.get("trace_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trace_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trace_id").toString()));
      }
      if ((jsonObj.get("custom_data") != null && !jsonObj.get("custom_data").isJsonNull()) && !jsonObj.get("custom_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_data").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AsyncDownloadScanRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AsyncDownloadScanRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AsyncDownloadScanRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AsyncDownloadScanRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AsyncDownloadScanRequest>() {
           @Override
           public void write(JsonWriter out, AsyncDownloadScanRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AsyncDownloadScanRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AsyncDownloadScanRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AsyncDownloadScanRequest
   * @throws IOException if the JSON string is invalid with respect to AsyncDownloadScanRequest
   */
  public static AsyncDownloadScanRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AsyncDownloadScanRequest.class);
  }

  /**
   * Convert an instance of AsyncDownloadScanRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

