/*
 * attachmentAV
 * Scan files for viruses, trojans, and other kinds of malware.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.attachmentav.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.attachmentav.client.JSON;

/**
 * AsyncS3ScanRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-16T09:59:54.016330+02:00[Europe/Berlin]", comments = "Generator version: 7.14.0")
public class AsyncS3ScanRequest {
  public static final String SERIALIZED_NAME_BUCKET = "bucket";
  @SerializedName(SERIALIZED_NAME_BUCKET)
  @javax.annotation.Nonnull
  private String bucket;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nonnull
  private String key;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nullable
  private String version;

  public static final String SERIALIZED_NAME_CALLBACK_URL = "callback_url";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URL)
  @javax.annotation.Nonnull
  private String callbackUrl;

  public static final String SERIALIZED_NAME_CALLBACK_HEADERS = "callback_headers";
  @SerializedName(SERIALIZED_NAME_CALLBACK_HEADERS)
  @javax.annotation.Nullable
  private Map<String, String> callbackHeaders = new HashMap<>();

  public static final String SERIALIZED_NAME_TRACE_ID = "trace_id";
  @SerializedName(SERIALIZED_NAME_TRACE_ID)
  @javax.annotation.Nullable
  private String traceId;

  public static final String SERIALIZED_NAME_CUSTOM_DATA = "custom_data";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATA)
  @javax.annotation.Nullable
  private String customData;

  public AsyncS3ScanRequest() {
  }

  public AsyncS3ScanRequest bucket(@javax.annotation.Nonnull String bucket) {
    this.bucket = bucket;
    return this;
  }

  /**
   * Get bucket
   * @return bucket
   */
  @javax.annotation.Nonnull
  public String getBucket() {
    return bucket;
  }

  public void setBucket(@javax.annotation.Nonnull String bucket) {
    this.bucket = bucket;
  }


  public AsyncS3ScanRequest key(@javax.annotation.Nonnull String key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nonnull
  public String getKey() {
    return key;
  }

  public void setKey(@javax.annotation.Nonnull String key) {
    this.key = key;
  }


  public AsyncS3ScanRequest version(@javax.annotation.Nullable String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }


  public AsyncS3ScanRequest callbackUrl(@javax.annotation.Nonnull String callbackUrl) {
    this.callbackUrl = callbackUrl;
    return this;
  }

  /**
   * Get callbackUrl
   * @return callbackUrl
   */
  @javax.annotation.Nonnull
  public String getCallbackUrl() {
    return callbackUrl;
  }

  public void setCallbackUrl(@javax.annotation.Nonnull String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }


  public AsyncS3ScanRequest callbackHeaders(@javax.annotation.Nullable Map<String, String> callbackHeaders) {
    this.callbackHeaders = callbackHeaders;
    return this;
  }

  public AsyncS3ScanRequest putCallbackHeadersItem(String key, String callbackHeadersItem) {
    if (this.callbackHeaders == null) {
      this.callbackHeaders = new HashMap<>();
    }
    this.callbackHeaders.put(key, callbackHeadersItem);
    return this;
  }

  /**
   * Get callbackHeaders
   * @return callbackHeaders
   */
  @javax.annotation.Nullable
  public Map<String, String> getCallbackHeaders() {
    return callbackHeaders;
  }

  public void setCallbackHeaders(@javax.annotation.Nullable Map<String, String> callbackHeaders) {
    this.callbackHeaders = callbackHeaders;
  }


  public AsyncS3ScanRequest traceId(@javax.annotation.Nullable String traceId) {
    this.traceId = traceId;
    return this;
  }

  /**
   * Get traceId
   * @return traceId
   */
  @javax.annotation.Nullable
  public String getTraceId() {
    return traceId;
  }

  public void setTraceId(@javax.annotation.Nullable String traceId) {
    this.traceId = traceId;
  }


  public AsyncS3ScanRequest customData(@javax.annotation.Nullable String customData) {
    this.customData = customData;
    return this;
  }

  /**
   * Get customData
   * @return customData
   */
  @javax.annotation.Nullable
  public String getCustomData() {
    return customData;
  }

  public void setCustomData(@javax.annotation.Nullable String customData) {
    this.customData = customData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AsyncS3ScanRequest asyncS3ScanRequest = (AsyncS3ScanRequest) o;
    return Objects.equals(this.bucket, asyncS3ScanRequest.bucket) &&
        Objects.equals(this.key, asyncS3ScanRequest.key) &&
        Objects.equals(this.version, asyncS3ScanRequest.version) &&
        Objects.equals(this.callbackUrl, asyncS3ScanRequest.callbackUrl) &&
        Objects.equals(this.callbackHeaders, asyncS3ScanRequest.callbackHeaders) &&
        Objects.equals(this.traceId, asyncS3ScanRequest.traceId) &&
        Objects.equals(this.customData, asyncS3ScanRequest.customData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucket, key, version, callbackUrl, callbackHeaders, traceId, customData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AsyncS3ScanRequest {\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    callbackHeaders: ").append(toIndentedString(callbackHeaders)).append("\n");
    sb.append("    traceId: ").append(toIndentedString(traceId)).append("\n");
    sb.append("    customData: ").append(toIndentedString(customData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("bucket", "key", "version", "callback_url", "callback_headers", "trace_id", "custom_data"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("bucket", "key", "callback_url"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AsyncS3ScanRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AsyncS3ScanRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AsyncS3ScanRequest is not found in the empty JSON string", AsyncS3ScanRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AsyncS3ScanRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AsyncS3ScanRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AsyncS3ScanRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bucket").toString()));
      }
      if (!jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (!jsonObj.get("callback_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callback_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callback_url").toString()));
      }
      if ((jsonObj.get("trace_id") != null && !jsonObj.get("trace_id").isJsonNull()) && !jsonObj.get("trace_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trace_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trace_id").toString()));
      }
      if ((jsonObj.get("custom_data") != null && !jsonObj.get("custom_data").isJsonNull()) && !jsonObj.get("custom_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_data").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AsyncS3ScanRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AsyncS3ScanRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AsyncS3ScanRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AsyncS3ScanRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AsyncS3ScanRequest>() {
           @Override
           public void write(JsonWriter out, AsyncS3ScanRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AsyncS3ScanRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AsyncS3ScanRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AsyncS3ScanRequest
   * @throws IOException if the JSON string is invalid with respect to AsyncS3ScanRequest
   */
  public static AsyncS3ScanRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AsyncS3ScanRequest.class);
  }

  /**
   * Convert an instance of AsyncS3ScanRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

